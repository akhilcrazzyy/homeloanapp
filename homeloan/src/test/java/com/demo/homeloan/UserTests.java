//package com.demo.homeloan;
//import com.demo.homeloan.entity.User;
//import org.junit.jupiter.api.BeforeEach;
//import org.junit.jupiter.api.Test;
//import static org.junit.jupiter.api.Assertions.*;
//
//public class UserTests {
//
//    private User user;
//
//    @BeforeEach
//    public void setUp() {
//        // Initialize a user instance before each test
//        user = new User();
//    }
//
//    @Test
//    public void testCreateUser() {
//        assertNotNull(user);
//    }
//
//    @Test
//    public void testSetAndGetFirstName() {
//        user.setFirstName("John");
//        assertEquals("John", user.getFirstName());
//    }
//
//    @Test
//    public void testSetAndGetLastName() {
//        user.setLastName("Doe");
//        assertEquals("Doe", user.getLastName());
//    }
//
//    @Test
//    public void testSetAndGetEmail() {
//        user.setEmail("john.doe@example.com");
//        assertEquals("john.doe@example.com", user.getEmail());
//    }
//
//    @Test
//    public void testSetAndGetPassword() {
//        user.setPassword("password123");
//        assertEquals("password123", user.getPassword());
//    }
//
//    @Test
//    public void testSetAndGetAdminFlag() {
//        user.setAdmin(true);
//        assertTrue(user.isAdmin());
//
//        user.setAdmin(false);
//        assertFalse(user.isAdmin());
//    }
//
//    @Test
//    public void testGenerateUserId() {
//        assertNull(user.getId()); // ID should be null before generation
//
//        // Assuming your entity generation strategy is GenerationType.IDENTITY
//        // Simulate entity manager persisting the user
//        user.setId(1L);
//
//        assertNotNull(user.getId()); // ID should not be null after generation
//    }
//
//    @Test
//    public void testUserEquality() {
//        User user1 = new User();
//        user1.setId(1L);
//        User user2 = new User();
//        user2.setId(1L);
//        User user3 = new User();
//        user3.setId(2L);
//
//        assertEquals(user1, user2); // Users with the same ID should be equal
//        assertNotEquals(user1, user3); // Users with different IDs should not be equal
//    }
//
//    @Test
//    public void testDataAnnotation() {
//        // Create a User instance
//        User user = new User();
//        user.setId(1L);
//        user.setFirstName("John");
//        user.setLastName("Doe");
//        user.setEmail("john.doe@example.com");
//        user.setPassword("password");
//        user.setAdmin(false);
//
//        // Test if toString() method generated by @Data returns expected result
//        String expectedToString = "User(id=1, firstName=John, lastName=Doe, email=john.doe@example.com, password=password, admin=false)";
//        assertEquals(expectedToString, user.toString());
//
//        // Test if equals() and hashCode() methods generated by @Data work as expected
//        User anotherUser = new User();
//        anotherUser.setId(1L);
//        anotherUser.setFirstName("John");
//        anotherUser.setLastName("Doe");
//        anotherUser.setEmail("john.doe@example.com");
//        anotherUser.setPassword("password");
//        anotherUser.setAdmin(false);
//
//        assertTrue(user.equals(anotherUser));
//        assertEquals(user.hashCode(), anotherUser.hashCode());
//    }
//
//    @Test
//    public void testAllArgsConstructorAnnotation() {
//        // Create a User instance using the constructor generated by @AllArgsConstructor
//        User user = new User(1L, "John", "Doe", "john.doe@example.com", "password", false);
//
//        // Verify that the constructor sets the values correctly
//        assertEquals(1L, user.getId());
//        assertEquals("John", user.getFirstName());
//        assertEquals("Doe", user.getLastName());
//        assertEquals("john.doe@example.com", user.getEmail());
//        assertEquals("password", user.getPassword());
//        assertFalse(user.isAdmin());
//    }
//}
